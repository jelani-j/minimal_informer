---
AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"

Parameters:
  TableName:
    Description: Name for DynamoDb Table
    Type: String
    Default: news-data
  
  BucketPrefix:
    Description: Name of S3 Bucket 
    Type: String
    Default: minimal-informer-codepipeline-artifacts

  # LambdaCodeKey:
  #   Type: String
  #   Description: Path to the ZIP file inside the bucket
  #   Default: 

Resources:
  NewsTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties: 
      TableName: !Ref TableName
      AttributeDefinitions:
        - AttributeName: name
          AttributeType: S
      KeySchema:
        - AttributeName: name
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # Role Creation
  NewsFetchMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - Effect: Allow
            Principal: 
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowDynamoDBAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement: 
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource: "*"

  StateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName:  StateMachineLambdaInvoke
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow 
                Action:
                  - lambda:InvokeFunction
                Resource: "*"
  # Lambda Function Definition
  WorldNewsFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: BasicLambdaExecution
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  # WorldNewsFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     FunctionName: WorldNewsFunction
  #     Handler: functions/fetchNews.handler
  #     Runtime: nodejs18.x
  #     CodeUri: 
  #       Bucket: !Sub "${BucketPrefix}-${AWS::AccountId}-${AWS::Region}"
  #       Key:
  #     Role: !GetAtt WorldNewsFunctionRole.Arn
  #     MemorySize: 128
  #     Timeout: 5

  # # State machine definition
  # MyStateMachine:
  #   Type: "AWS::StepFunctions::StateMachine"
  #   Properties:
  #     RoleArn: !GetAtt StateMachineRole.Arn
  #     DefinitionString:
  #       Fn::Sub: |
  #           {
  #             "Comment": "State machine to fetch news",
  #             "StartAt": "FetchNews",
  #             "States": {
  #               "FetchNews": {
  #                 "Type": "Task",
  #                 "Resource": "${WorldNewsFunction.Arn}",
  #                 "End": true
  #               }
  #             }
  #           }

# Outputs:
#   set of outputs
